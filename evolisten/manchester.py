# manchester decode evohome RF messages

manchester_encode_table = [0xAA, 0xA9, 0xA6, 0xA5, 0x9A, 0x99, 0x96, 0x95,
                                0x6A, 0x69, 0x66, 0x65, 0x5A, 0x59, 0x56, 0x55]


def manchester_decode(a, b):
    x = manchester_encode_table.index(b)
    m = manchester_encode_table.index(a)  
    x |= m << 4
    return x

assert manchester_decode(0xA9, 0x5A) == 0x1c
assert manchester_decode(0xA9, 0x6A) == 0x18

RFbuffer = [
0xA9,
0x6A,
0x6A,
0xA6,
0xAA,
0x59,
0xA6,
0x56,
0x6A,
0xA6,
0xAA,
0x59,
0xA6,
0x56,
0xA5,
0xA9,
0x59,
0x66,
0xA9,
0x56,
0xAA,
0xAA,
0x56,
0x55,
0xAA,
0xAA,
0x95,
0x55,
0x55,
0x55,
0xA5,
0x59,
0xA5,
0x6A,
0xAA,
0x96,
0x66,
0x56,
0xAA,
0x6A,
0xA6,
0x66,
0xAA,
0x6A,
0xA5,
0x55,
0xAA,
0x96,
0x95,
0x99,
0x55,
0x6A,
0xAA,
0xAA,
0xAA,
0xAA,
0xAA,
0xA6,
0x99,
0x6A,
0x99,
0x6A,
0xAA,
0xAA,
0xAA,
0xAA,
0x56,
0x55,
0x56,
0x55,
0xA9,
0xA6,
0x56,
0xA9,
0xA9,
0xA6,
0x56,
0xA9,
0xAA,
0xAA,
0x9A,
0x59]

l = []
for a, b in zip(RFbuffer[0::2], RFbuffer[1::2]): # [(1,2), (3,4), (5,6), ...]
    x = manchester_decode(a,b)
    print(f'{a:02x} {b:02x} -> {x:02x}')
    l.append(x)

print(" ".join("{:02X}".format(c) for c in l))


